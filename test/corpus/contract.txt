============================================
contract
============================================

contract Empty {}

contract Filled {
    init() {}
    receive() {}
    external() {}
    bounced(msg: Slice) {}
}

contract NoLazy(
    foo: Int as int16,
) {
    get fun getFoo(): Int {
        return self.foo;
    }
}

contract SemiCheck1 {
    foo: Int as int16 = 0;
    field: Int
}

contract SemiCheck2 {
    init() {}
    field: Int
}

---

(source_file
  (contract
    name: (identifier)
    body: (contract_body))
  (contract
    name: (identifier)
    body: (contract_body
      (init_function
        parameters: (parameter_list)
        body: (function_body))
      (receive_function
        body: (function_body))
      (external_function
        body: (function_body))
      (bounced_function
        parameter: (parameter
          name: (identifier)
          type: (type_identifier))
        body: (function_body))))
  (contract
    name: (identifier)
    parameters: (parameter_list
      (parameter
        name: (identifier)
        type: (type_identifier)
        tlb: (tlb_serialization
          type: (identifier))))
    body: (contract_body
      (storage_function
        attributes: (function_attributes
          (get_attribute))
        name: (identifier)
        parameters: (parameter_list)
        result: (type_identifier)
        body: (function_body
          (return_statement
            (field_access_expression
              object: (self)
              name: (identifier)))
        ))
    ))
  (contract
    name: (identifier)
    body: (contract_body
      (storage_variable
        name: (identifier)
        type: (type_identifier)
        tlb: (tlb_serialization
          type: (identifier))
        value: (integer))
      (storage_variable
        name: (identifier)
        type: (type_identifier))
    ))
  (contract
    name: (identifier)
    body: (contract_body
      (init_function
        parameters: (parameter_list)
        body: (function_body))
      (storage_variable
        name: (identifier)
        type: (type_identifier)))))
